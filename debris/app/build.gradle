apply plugin: 'com.android.application'


ext.majorNumber = 1
ext.minorNumber = 0
ext.revisionNumberCMD = 'git rev-list HEAD --count'
ext.revisionNumber = revisionNumberCMD.execute().getText().trim().toInteger()
ext.revisionDescriptionCMD = 'git describe --always'
ext.tempRevisionDescription = revisionDescriptionCMD.execute().getText().trim()
ext.revisionDescription = (tempRevisionDescription == null || (tempRevisionDescription).size() == 0) ? new Date().format("yyMMdd") : (tempRevisionDescription).substring((tempRevisionDescription).size() - 6)


android {
    compileSdkVersion rootProject.ext.var.compileSdkVersion
    buildToolsVersion rootProject.ext.var.buildToolsVersion
    defaultConfig {
        applicationId "xdrj.com.debris"
        minSdkVersion rootProject.ext.var.minSdkVersion
        targetSdkVersion rootProject.ext.var.targetSdkVersion
        versionCode getVersionCode(false)
        versionName getVersionName(false)
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ moduleName : project.getName() ]
            }
        }

        multiDexEnabled true
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.mergedFlavor.versionCode = getVersionCode(true)
            variant.mergedFlavor.versionName = getVersionName(true)
        } else if (variant.buildType.name.equals('debug')) {
            variant.mergedFlavor.versionCode = getVersionCode(false)
            variant.mergedFlavor.versionName = getVersionName(false)
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':common')
    compile project(':function')
    compile project(':moduleTest')
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    //阿里路由框架
    compile 'com.alibaba:arouter-api:1.2.4'
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.4'
    testCompile 'junit:junit:4.12'
}

def getVersionCode(boolean isRelease) {

    if (isRelease) {
        //正式环境
        majorNumber * 1000000 + minorNumber * 10000 + revisionNumber

    } else {
        //debug环境
        Integer.parseInt(new Date().format("yyMMddHHmm"))
    }


}

def getVersionName(boolean isRelease) {

    if (isRelease) {
        //正式环境
        majorNumber + "." + minorNumber + "." + revisionNumber + "." + revisionDescription

    } else {
        //debug环境
        String today = new Date().format("yyMMdd")
        String time = new Date().format("HHmmss")
        majorNumber + "." + minorNumber + "." + revisionNumber + ".$today.$time." + revisionDescription
    }


}



